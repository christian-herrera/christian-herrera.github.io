====================================================================================================  CONFIGURACION DE LA TERMINAL CON GIT ===================================================================================================

1)  Instalacion de GIT

2)  Inicializo GPG, importo la clave publica
		gpg -K
		gpg --card-status
		gpg --edit-key
			fetch
			q
		gpg --key-edit 87F44023A98DE42AF19274E8AD175429B6768C5C
		trust
		q

3)  Configuro el Socket SSH
		export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

4)  Configuro las variables globales de Git
		git config --global user.signingkey 87F44023A98DE42AF19274E8AD175429B6768C5C
		git config --global gpg.program gpg
		git config --global commit.gpgsign true
	      
		git config --global user.name "christian-herrera"
		git config --global user.email "chris1496.rp@gmail.com"

5)  Creo el Repositorio y obtengo el link

6)  Creo una carpeta y me posiciono con la ventana de Git en la misma

7)  Inicio el GIT y lo enlazo con el repositorio en la nube
		git clone git@github.com:christian-herrera/<REPO>.git
		git remote add origin git@github.com:christian-herrera/<REPO>.git

8)  Agregar los archivos
		git add .

9)  Crear un Commit Firmado
		git commit -S -m "Comentario"

10) Ubicarnos en la rama principal
		git branch -M main

10) Hacer un Push para subir el commit
		git push -u origin main



=============================================================================================
Automatizar el punto (3):
a) 	Crear el archivo ~/.profile en un bash nuevo

b) 	Colocar la linea (3)

c)	Cerrar el bash y volver a abrirlo para corroborar que se puede hacer un commit firmado


==========================================================================================================  COMANDOS BASICOS DE GIT ==========================================================================================================


git init                            Inicializa un nuevo repositorio GIT

git clone [url]                     Clona un repositorio remoto existente en tu maquina local

git add [archivos]                  Agrega los cambios de los archivos al area de preparacion

git commit -m "[mensaje]"		    Confirma los cambios agregados en el área de preparación y crea una nueva versión del repositorio con un mensaje descriptivo.
git commit --amend				    Opcion 1: Sin archivos en Stagin Area -> Modifica el mensaje del Commit
                                    Opcion 2: Con archivos en Stagin Area -> Actualiza el ultimo commit con los archivos de Stagin Area y permite cambiar el mensaje

git status                          Muestra el estado actual del repositorio, incluyendo los archivos modificados, agregados o eliminados.
git status -s                       Formato corto.

git log                             Muestra un registro de los commits realizados, incluyendo su identificador, autor, fecha y mensaje.git log
git log --oneline                   Muestra los primeros 6 digitos del hash

git fetch                           Descarga todos los commits, archivos y referencias de un repositorio remoto a tu repositorio local pero no modifica ningun archivo

git pull                            Descarga y fusiona los cambios remotos en tu rama actual.

git push                            Sube los cambios confirmados en tu rama local al repositorio remoto.

git git branch                      Lista todas las ramas disponibles en el repositorio y muestra la rama actual resaltada.

git checkout [rama]                 Cambia a la rama especificada.

git merge [rama]                    Fusiona la rama especificada con la rama actual.

git remote add [nombre] [url]       Agrega un nuevo repositorio remoto con el nombre especificado y la URL proporcionada.
git remote -v                       Muestra una lista de los repositorios remotos configurados.

git diff                            Muestra las diferencias entre los cambios sin confirmar y la última versión confirmada.

git reset [archivo]	                Descarta los cambios realizados en un archivo específico.
git reset [hash_commit]             Descarta los cambios posteriores al commit indicado y mueve el HEAD al commit indicado.
git reset --soft [hash_commit]      Deshace los cambios posteriores al commit especificado, manteniendo los cambios en el staging area.
git reset --mixed [hash_commit]	    Deshace los commits posteriores y elimina los cambios del área de preparación, pero los archivos modificados permanecen en tu directorio de trabajo. 
								    Puedes agregar los cambios nuevamente al área de preparación y hacer nuevos commits.
git reset --hard [hash_commit]	    Deshace los commits posteriores y elimina todos los cambios, incluyendo los del área de preparación y del directorio de trabajo. Ten en cuenta que los cambios no se pueden recuperar después de usar este comando.





==========================================================================================================  ESTADOS DE LOS ARCHIVOS ==========================================================================================================


                                          | WORKING DIRECTORY |                                         | STAGIN AREA |                                             | GIT REPOSOITORY |			
                                          |                   |                                         |             |                                             |                 |			
-------- (cp, mv, touch, create) ------>  |                   |                                         |             |                                             |                 |			Coloco archivos en la carpeta
<-------   (cp, mv, rm, delete)  -------  |                   |                                         |             |                                             |                 |			Elimino archivos de la carpeta
                                          |                   |                                         |             |                                             |                 |			
                                          |                   |   --------     (git add)     ------>    |             |                                             |                 |			Agrego al Stagin Area
                                          |                   |   <------- (git rm --cached) -------    |             |                                             |                 |			Quito del Stagin Area
<------------------------------------------------------------------------- (git rm --force)  -------    |             |                                             |                 |			Quito del Stagin Area y elimino el archivo
                                          |                   |                                         |             |                                             |                 |			
                                          |                   |                                         |             |     -------      (git commit)    ------->   |                 |			Hago el commit
                                          |                   |                                         |             |     ------- (git commit --amend) ------->   |                 |			Realiza el commit pero reemplaza al actual (actualiza el ultimo)
                                          |                   |                                         |             |     <------  (git reset --soft)  --------   |                 |			Deshace y mantiene el Stagin Area
                                          |                   |   <-------------------------------------|-------------|------------ (git reset --mixed)  --------   |                 |			Deshace pero no elimina
<-----------------------------------------|-------------------|-----------------------------------------|-------------|------------  (git reset --hard)  --------   |                 |			Deshace y elimina (Carga de cero el commit indicado)
                                          |                   |                                         |             |                                             |                 |			
                                          |                   |                                         |             |                                             |                 |			
                                          |                   |                                         |             |                                             |                 |			















